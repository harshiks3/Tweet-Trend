Jfrog Artifactory URL:"https://galaxyzz.jfrog.io"
artifact_location: /home/ubuntu/jenkins/workspace/MultiBranch_Pipleline_main/jarstaging/com/valaxy/demo-workshop/2.1.2
credentials: JFrog_Artifactory


// stage('Build') {

        //     steps {

        //         sh "mvn clean deploy"

        //     }

        // }
        // stage('SonarQube analysis') {
        //     environment {
        //         scannerHome = tool 'sonarscanner'

        //     }
        //     steps{
        //         withSonarQubeEnv('sonarqube-server') { // If you have configured more than one global server connection, you can specify its name
        //             sh "${scannerHome}/bin/sonar-scanner"
        //         }
        //     }
        // }
        stage("Jar Publish") {
            steps {
                script {
                    echo '<--------------- Jar Publish Started --------------->'

                    // Create a connection to the Artifactory server using the URL and credentials ID
                    def server = Artifactory.newServer url: registry + "/artifactory", credentialsId: "JFrog_Artifactory"

                    // Set properties such as build ID and commit ID
                    def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}"

                    // Define the upload spec for the artifacts without comments
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "jarstaging/*.jar",
                                "target": "libs-release-local/{1}",
                                "flat": "false",
                                "props": "${properties}",
                                "exclusions": ["*.sha1", "*.md5"]
                            }
                        ]
                    }"""

                    // Upload the artifacts to Artifactory
                    def buildInfo = server.upload(uploadSpec)

                    // Collect environment information and set it in build info
                    buildInfo.env.collect()

                    // Publish the build info to Artifactory
                    server.publishBuildInfo(buildInfo)

                    echo '<--------------- Jar Publish Ended --------------->'  
                }
            }   
        }
    }

            
//         stage("Jar Publish") {
//             steps {
//                 script {
//                         echo '<--------------- Jar Publish Started --------------->'
//                         def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"JFrog_Artifactory"
//                         def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
//                         def uploadSpec = """{
//                             "files": [
//                                 {
//                                     "pattern": "jarstaging/*.jar",  // Use a more specific pattern for matching JAR files
//                                     "target": "libs-release-local/{1}",  // Target path in Artifactory
//                                     "flat": "false",  // Keep the directory structure intact
//                                     "props": "${properties}",
//                                     "exclusions": ["*.sha1", "*.md5"]  // Exclude checksum files
//                                 }
//                             ]
//                         }"""
//                     // Upload the artifacts to Artifactory
//                     def buildInfo = server.upload(uploadSpec)

//                     // Collect environment information and set it in build info
//                     buildInfo.env.collect()

//                     // Publish the build info to Artifactory
//                     server.publishBuildInfo(buildInfo)
                    
//                     echo '<--------------- Jar Publish Ended --------------->'    
                
//                 }
//             }   
//         }   

//     }

// }
}



def registry = "https://galaxyzz.jfrog.io"
pipeline {
    agent {
        node {
            label 'Linux_Agent'
        }
    }
    environment {
        PATH = "/opt/apache-maven-3.9.9/bin:$PATH"
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn clean install' 
            }
        }
        stage('Jar Publish') { 
            steps {
                script {
                    echo '<--------------- Jar Publish Started --------------->'

                    // Define the Artifactory server and credentials
                    def server = Artifactory.newServer(
                        url: registry + "/artifactory", 
                        credentialsId: "JFrog_Artifactory"
                    )

                // Define properties for the build (build ID and commit ID)
                def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}"

                // Define the upload spec, ensuring it's correctly formatted
                def uploadSpec = """{
                    "files": [
                        {
                            "pattern": "jarstaging/*.jar",  // Ensure this is the correct path
                            "target": "libs-release-local/${env.BUILD_ID}/",  // Specify the target location in Artifactory
                            "flat": "false",  // Preserve directory structure
                            "props": "${properties}",
                            "exclusions": ["*.sha1", "*.md5"]  // Exclude checksum files
                        }
                    ]
                }"""

            try {
                // Upload the artifact to Artifactory using the upload spec
                def buildInfo = server.upload(uploadSpec)

                // Collect environment information and associate it with the build
                buildInfo.env.collect()

                // Publish the build info to Artifactory
                server.publishBuildInfo(buildInfo)

                echo '<--------------- Jar Publish Ended --------------->'
            } catch (Exception e) {
                echo "Error during artifact upload: ${e.getMessage()}"
                currentBuild.result = 'FAILURE'
                throw e  // Re-throw the error to fail the build
            }
        }
   
                
                    
                     
                
            }
        }
    }
}
